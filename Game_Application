// Singleton Pattern: GameState
class GameState {
    private static GameState instance;

    private int currentLevel;
    private String difficulty;

    private GameState() {
        currentLevel = 1;
        difficulty = "Normal";
    }

    public static GameState getInstance() {
        if (instance == null) {
            instance = new GameState();
        }
        return instance;
    }

    public int getCurrentLevel() {
        return currentLevel;
    }

    public void setCurrentLevel(int level) {
        this.currentLevel = level;
    }

    public String getDifficulty() {
        return difficulty;
    }

    public void setDifficulty(String difficulty) {
        this.difficulty = difficulty;
    }
}

// Factory Method Pattern: Enemy Creation
abstract class Enemy {
    public abstract void attack();
}

class Goblin extends Enemy {
    @Override
    public void attack() {
        System.out.println("Goblin attacks with a club!");
    }
}

class Dragon extends Enemy {
    @Override
    public void attack() {
        System.out.println("Dragon breathes fire!");
    }
}

class EnemyFactory {
    public Enemy createEnemy(String type) {
        switch (type) {
            case "Goblin":
                return new Goblin();
            case "Dragon":
                return new Dragon();
            default:
                throw new IllegalArgumentException("Unknown enemy type: " + type);
        }
    }
}

// Abstract Factory Pattern: Weapons and Power-ups
abstract class Weapon {
    public abstract void use();
}

class Sword extends Weapon {
    @Override
    public void use() {
        System.out.println("Swinging the sword!");
    }
}

class Bow extends Weapon {
    @Override
    public void use() {
        System.out.println("Shooting an arrow!");
    }
}

abstract class PowerUp {
    public abstract void activate();
}

class HealthPotion extends PowerUp {
    @Override
    public void activate() {
        System.out.println("Health restored!");
    }
}

class SpeedBoost extends PowerUp {
    @Override
    public void activate() {
        System.out.println("Speed increased!");
    }
}

interface LevelFactory {
    Weapon createWeapon();
    PowerUp createPowerUp();
}

class EasyLevelFactory implements LevelFactory {
    @Override
    public Weapon createWeapon() {
        return new Sword();
    }

    @Override
    public PowerUp createPowerUp() {
        return new HealthPotion();
    }
}

class HardLevelFactory implements LevelFactory {
    @Override
    public Weapon createWeapon() {
        return new Bow();
    }

    @Override
    public PowerUp createPowerUp() {
        return new SpeedBoost();
    }
}

// Main Class: Game Application
public class GameApplication {
    public static void main(String[] args) {
        // Singleton: Manage game state
        GameState gameState = GameState.getInstance();
        gameState.setDifficulty("Hard");
        System.out.println("Current Difficulty: " + gameState.getDifficulty());

        // Factory Method: Create enemies
        EnemyFactory enemyFactory = new EnemyFactory();
        Enemy goblin = enemyFactory.createEnemy("Goblin");
        goblin.attack();
        Enemy dragon = enemyFactory.createEnemy("Dragon");
        dragon.attack();

        // Abstract Factory: Create weapons and power-ups
        LevelFactory levelFactory;
        if (gameState.getDifficulty().equals("Easy")) {
            levelFactory = new EasyLevelFactory();
        } else {
            levelFactory = new HardLevelFactory();
        }

        Weapon weapon = levelFactory.createWeapon();
        weapon.use();
        PowerUp powerUp = levelFactory.createPowerUp();
        powerUp.activate();
    }
}
